
import sys
sys.path.append('..')

import cv2

import os
import numpy as np
from skimage.io import imread
from skimage import color
from skimage import io

import matplotlib.pyplot as plt

from efficientnet.layers import Swish, DropConnect
from efficientnet.model import ConvKernalInitializer
from tensorflow.keras.utils import get_custom_objects

from tensorflow.python.keras.applications.imagenet_utils import decode_predictions
from efficientnet import EfficientNetB3 as Net
from efficientnet import center_crop_and_resize, preprocess_input

get_custom_objects().update({
    'ConvKernalInitializer': ConvKernalInitializer,
    'Swish': Swish,
    'DropConnect':DropConnect
})

# Commented out IPython magic to ensure Python compatibility.
import os
# %cd /content
if not os.path.isdir("efficientnet_keras_transfer_learning"):
  !git clone https://github.com/EmilStalvinge/efficientnet_keras_transfer_learning
# %cd efficientnet_keras_transfer_learning/

from google.colab import drive
drive.mount('/content/drive')

from tensorflow.keras.models import load_model
model = load_model("/content/drive/My Drive/Colab Notebooks/efficentNetb4.h5")

model.summary()

# test image

image = imread("/content/sample_data/cropped_8.jpg", as_gray=True)
plt.figure(figsize=(10, 10))
plt.imshow(image)
plt.show()

#IMG_SIZE = 128
#img_gray = cv2.imread("/content/sample_data/cropped_1.jpg", cv2.IMREAD_GRAYSCALE)
#img = cv2.resize(img_gray, (IMG_SIZE, IMG_SIZE))

# preprocess input

image = imread("/content/sample_data/cropped_3.jpg", as_gray=True)

image_size = model.input_shape[1]

#x = center_crop_and_resize(image, image_size=image_size)
#x = preprocess_input(image)
#x = np.expand_dims(x, 3)
x = np.expand_dims(image, 0)
x = np.expand_dims(x, 3)

# make prediction and decode

y = model.predict(x)



CATEGORIES = ["fox", "hare", "lynx", "deer", "bear", "boar"]

#decode_predictions(y)
max_value = np.amax(y)
index = np.where(y == np.amax(y))
that_animal_is = CATEGORIES[index[1][0]]
print(that_animal_is)
print(y)
print(max_value)

plt.imshow(image)
plt.title(that_animal_is, fontsize=50)
plt.show()
